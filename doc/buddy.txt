*buddy.txt*            For Neovim >= 0.8.0           Last change: 2023 June 09

==============================================================================
Table of Contents                                    *buddy-table-of-contents*

1. Buddy.nvim                                               |buddy-buddy.nvim|
  - What is buddy.nvim?                 |buddy-buddy.nvim-what-is-buddy.nvim?|
  - Features                                       |buddy-buddy.nvim-features|
  - Installation                               |buddy-buddy.nvim-installation|
  - Functions                                     |buddy-buddy.nvim-functions|
  - Configuration                             |buddy-buddy.nvim-configuration|
  - Contributing                               |buddy-buddy.nvim-contributing|

==============================================================================
1. Buddy.nvim                                               *buddy-buddy.nvim*


WHAT IS BUDDY.NVIM?                     *buddy-buddy.nvim-what-is-buddy.nvim?*

Buddy.nvim is a plugin for Neovim that provides various handy functions for
Ruby developers. The plugin can be called via command-line mode using :Buddy or
by requiring the module in Lua code.


FEATURES                                           *buddy-buddy.nvim-features*

- Add a debugger line `(binding.pry)` to your Ruby code
- Prepend a file with a magic comment (` frozen_string_literal: true`)
- Copy linter error code to clipboard
- Open linter error documentation in browser


INSTALLATION                                   *buddy-buddy.nvim-installation*

Install the plugin using your preferred package manager, e.g., lazy.nvim:

>lua
    return {
      "npupko/buddy.nvim",
      config = function ()
        local buddy = require('buddy')
        buddy.setup({})
    
        vim.keymap.set('n', '<leader>/', buddy.add_debugger, { silent = true, desc = 'Add debugger to next line' })
        vim.keymap.set('n', '<leader>cle', buddy.copy_linter_error, { silent = true, desc = 'Copy linter error' })
        vim.keymap.set('n', '<leader>clb', buddy.open_linter_error_in_browser, { silent = true, desc = 'Open linter error in browser' })
    
        vim.api.nvim_create_user_command('Frt', buddy.prepend_file_with_magic_comment, { desc = 'Add magic comment line to file' })
      end,
    }
<


FUNCTIONS                                         *buddy-buddy.nvim-functions*


ADD_DEBUGGER()

Adds a binding.pry line to the current file if the file type is supported
(Ruby, rb, ru).


PREPEND_FILE_WITH_MAGIC_COMMENT()

Prepends the current file with the magic comment frozen_string_literal: true if
itâ€™s not already there.


COPY_LINTER_ERROR()

Copies the linter error code to the clipboard.


OPEN_LINTER_ERROR_IN_BROWSER(OPTIONS)

Opens the linter error documentation in a browser. Provide an options table
with an open_linter_error_in_browser.command key to specify the command to open
the browser.


EXEC_FUNCTION_ON_LINTER_ERROR_CODE(FUNC)

Executes a function on the linter error code. Pass a callback function that
accepts the error result as its argument.


GET_COMMANDS()

Returns a table of available function names in the plugin.


CONFIGURATION                                 *buddy-buddy.nvim-configuration*


SETUP(OPTIONS)

Pass a table of options to the setup function to configure the plugin. The
following options are available:

>lua
    local buddy = require('buddy')
    buddy.setup({
        -- Configure which commands are enabled
        enabled_commands = {
            "prepend_file_with_magic_comment",
            "copy_linter_error",
            "open_linter_error_in_browser",
            "add_debugger",
        },
        -- Configure the command to open the browser
        open_linter_error_in_browser = {
            command = "open"
        },
        add_debugger = {
            command = "binding.pry"
        }
    })
<


CONTRIBUTING                                   *buddy-buddy.nvim-contributing*

All contributions are welcome! Just open a pull request.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
